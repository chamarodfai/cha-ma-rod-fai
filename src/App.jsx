import { useState, useEffect } from 'react'
import { Plus, Minus, ShoppingCart, Receipt, Coffee, Database, BarChart3 } from 'lucide-react'

const categories = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏ä‡∏≤‡πÄ‡∏¢‡πá‡∏ô', '‡∏ä‡∏≤‡∏£‡πâ‡∏≠‡∏ô', '‡∏ä‡∏≤‡∏õ‡∏±‡πà‡∏ô', '‡∏Å‡∏≤‡πÅ‡∏ü', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©']

function App() {
  const [cart, setCart] = useState([])
  const [selectedCategory, setSelectedCategory] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  const [menuItems, setMenuItems] = useState([])
  const [loading, setLoading] = useState(true)
  const [orders, setOrders] = useState([])
  const [showDashboard, setShowDashboard] = useState(false)

  // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å API (with fallback)
  useEffect(() => {
    fetchMenuItems()
  }, [])

  const fetchMenuItems = async () => {
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const fallbackData = [
        { id: 1, name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏¢‡πá‡∏ô', price: 25, category: '‡∏ä‡∏≤‡πÄ‡∏¢‡πá‡∏ô' },
        { id: 2, name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡∏£‡πâ‡∏≠‡∏ô', price: 20, category: '‡∏ä‡∏≤‡∏£‡πâ‡∏≠‡∏ô' },
        { id: 3, name: '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏¢‡πá‡∏ô', price: 25, category: '‡∏ä‡∏≤‡πÄ‡∏¢‡πá‡∏ô' },
        { id: 4, name: '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏£‡πâ‡∏≠‡∏ô', price: 20, category: '‡∏ä‡∏≤‡∏£‡πâ‡∏≠‡∏ô' },
        { id: 5, name: '‡∏ä‡∏≤‡∏î‡∏≥‡πÄ‡∏¢‡πá‡∏ô', price: 20, category: '‡∏ä‡∏≤‡πÄ‡∏¢‡πá‡∏ô' },
        { id: 6, name: '‡∏ä‡∏≤‡∏î‡∏≥‡∏£‡πâ‡∏≠‡∏ô', price: 15, category: '‡∏ä‡∏≤‡∏£‡πâ‡∏≠‡∏ô' },
        { id: 7, name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢‡∏õ‡∏±‡πà‡∏ô', price: 35, category: '‡∏ä‡∏≤‡∏õ‡∏±‡πà‡∏ô' },
        { id: 8, name: '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏õ‡∏±‡πà‡∏ô', price: 35, category: '‡∏ä‡∏≤‡∏õ‡∏±‡πà‡∏ô' },
        { id: 9, name: '‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏¢‡πá‡∏ô', price: 30, category: '‡∏Å‡∏≤‡πÅ‡∏ü' },
        { id: 10, name: '‡∏Å‡∏≤‡πÅ‡∏ü‡∏£‡πâ‡∏≠‡∏ô', price: 25, category: '‡∏Å‡∏≤‡πÅ‡∏ü' },
        { id: 11, name: '‡πÇ‡∏≠‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á', price: 35, category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©' },
        { id: 12, name: '‡∏ô‡πâ‡∏≥‡πÅ‡∏î‡∏á', price: 15, category: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©' }
      ]
      
      setMenuItems(fallbackData)
      
      // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å API (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
      try {
        const response = await fetch('/api/menu')
        if (response.ok) {
          const data = await response.json()
          setMenuItems(data)
        }
      } catch (apiError) {
        console.log('API not available, using fallback data')
      }
    } catch (error) {
      console.error('Error fetching menu items:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchOrders = async () => {
    try {
      const response = await fetch('/api/orders')
      if (response.ok) {
        const data = await response.json()
        setOrders(data)
      }
    } catch (error) {
      console.error('Error fetching orders:', error)
    }
  }

  const addToCart = (item) => {
    const existingItem = cart.find(cartItem => cartItem.id === item.id)
    if (existingItem) {
      setCart(cart.map(cartItem =>
        cartItem.id === item.id
          ? { ...cartItem, quantity: cartItem.quantity + 1 }
          : cartItem
      ))
    } else {
      setCart([...cart, { ...item, quantity: 1 }])
    }
  }

  const removeFromCart = (itemId) => {
    const existingItem = cart.find(cartItem => cartItem.id === itemId)
    if (existingItem.quantity === 1) {
      setCart(cart.filter(cartItem => cartItem.id !== itemId))
    } else {
      setCart(cart.map(cartItem =>
        cartItem.id === itemId
          ? { ...cartItem, quantity: cartItem.quantity - 1 }
          : cartItem
      ))
    }
  }

  const clearCart = () => {
    setCart([])
  }

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0)
  }

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0)
  }

  const filteredItems = selectedCategory === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' 
    ? menuItems 
    : menuItems.filter(item => item.category === selectedCategory)

  const processOrder = async () => {
    if (cart.length === 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠')
      return
    }
    
    try {
      setLoading(true)
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ID ‡πÅ‡∏ö‡∏ö local
      const orderId = Date.now()
      
      const orderSummary = cart.map(item => 
        `${item.name} x${item.quantity} = ${item.price * item.quantity}‡∏ø`
      ).join('\n')
      
      const total = getTotalPrice()
      
      // ‡∏•‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á API (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
      try {
        const response = await fetch('/api/orders', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            items: cart,
            total: total
          })
        })
        
        if (response.ok) {
          const order = await response.json()
          alert(`‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:\n${orderSummary}\n\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: ${total}‡∏ø\n\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: #${order.id}`)
        } else {
          throw new Error('API Error')
        }
      } catch (apiError) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö offline mode
        alert(`‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:\n${orderSummary}\n\n‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô: ${total}‡∏ø\n\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: #${orderId}\n\nüì± (‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)`)
      }
      
      clearCart()
    } catch (error) {
      console.error('Error processing order:', error)
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-gradient-to-r from-thai-orange to-thai-gold text-white p-4 shadow-lg">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Coffee className="w-8 h-8" />
            <h1 className="text-2xl font-bold">POS ‡∏£‡πâ‡∏≤‡∏ô‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢</h1>
          </div>
          <div className="flex items-center space-x-4">
            <div className="bg-white/20 px-3 py-1 rounded-full">
              ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {new Date().toLocaleDateString('th-TH')}
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto p-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Menu Section */}
          <div className="lg:col-span-2">
            <div className="card">
              <h2 className="text-xl font-semibold mb-4 text-gray-800">‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°</h2>
              
              {/* Category Filter */}
              <div className="flex flex-wrap gap-2 mb-6">
                {categories.map(category => (
                  <button
                    key={category}
                    onClick={() => setSelectedCategory(category)}
                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                      selectedCategory === category
                        ? 'bg-thai-orange text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {category}
                  </button>
                ))}
              </div>

              {/* Menu Items Grid */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredItems.map(item => (
                  <div key={item.id} className="menu-item-card" onClick={() => addToCart(item)}>
                    <div className="flex flex-col h-full">
                      <h3 className="font-semibold text-gray-800 mb-2">{item.name}</h3>
                      <p className="text-sm text-gray-600 mb-2">{item.category}</p>
                      <div className="flex justify-between items-center mt-auto">
                        <span className="text-lg font-bold text-thai-orange">{item.price}‡∏ø</span>
                        <button className="bg-thai-orange hover:bg-orange-600 text-white p-2 rounded-full transition-colors">
                          <Plus className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Cart Section */}
          <div className="lg:col-span-1">
            <div className="card sticky top-4">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-800 flex items-center">
                  <ShoppingCart className="w-5 h-5 mr-2" />
                  ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                </h2>
                <span className="bg-thai-orange text-white px-2 py-1 rounded-full text-sm">
                  {getTotalItems()}
                </span>
              </div>

              {cart.length === 0 ? (
                <p className="text-gray-500 text-center py-8">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
              ) : (
                <div className="space-y-3">
                  {cart.map(item => (
                    <div key={item.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-800">{item.name}</h4>
                        <p className="text-sm text-gray-600">{item.price}‡∏ø x {item.quantity}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => removeFromCart(item.id)}
                          className="p-1 bg-red-100 hover:bg-red-200 text-red-600 rounded"
                        >
                          <Minus className="w-4 h-4" />
                        </button>
                        <span className="w-8 text-center font-medium">{item.quantity}</span>
                        <button
                          onClick={() => addToCart(item)}
                          className="p-1 bg-green-100 hover:bg-green-200 text-green-600 rounded"
                        >
                          <Plus className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {cart.length > 0 && (
                <div className="mt-6 space-y-3">
                  <div className="border-t pt-3">
                    <div className="flex justify-between items-center text-lg font-bold text-gray-800">
                      <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô:</span>
                      <span className="text-thai-orange">{getTotalPrice()}‡∏ø</span>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <button
                      onClick={processOrder}
                      className="w-full btn-primary flex items-center justify-center"
                    >
                      <Receipt className="w-4 h-4 mr-2" />
                      ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                    </button>
                    <button
                      onClick={clearCart}
                      className="w-full btn-secondary"
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default App
